#!/usr/bin/env zsh
#
# chync - Check synchronisation status of repositories.
#
# Copyright ⓒ 2017-∞ David Pätzel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Note: Functions prefixed with “p” print something.


IFS=$'\n'


# How often each encountered remote was pUnsynced ($remotes[bla] == 1 means that
# remote bla was pUnsynced *once*, not by *one commit*).  Ugly.  State.  Whatever.
typeset -A remotes


# Parse command line arguments

typeset -a hidden

typeset -A depth

typeset -a discover

typeset -A relativeTo

zparseopts\
  a=hidden -hidden=hidden\
  d:=depth -depth:=depth\
  -relative-to:=relativeTo\
  v=verbose -verbose=verbose\
  h=help -help=help\
  -long-help=longHelp

[[ -z $relativeTo ]] && relativeTo=$HOME


function pUsage {
    echo "Usage: chync [OPTION]..."
    column -t -s "|" <<EOF
|-a, --hidden|Whether to include hidden (dot-prefixed) directories if --depth is set [default: ]
|-d, --depth N|If set, check the sync status of the current directory instead of only repositories in .mrconfig with recurse depth N [default: ]
|--relative-to FILE|Output path should be relative to FILE [default: $HOME]
|-v, --verbose|Be verbose
|-h, --help|Print this help
|--long-help|Print more detailed help
EOF
}


function pLongUsage {
    pUsage
    echo
    cat <<EOF
* What does it show?
** Repository status
   - M: under control of $HOME myrepo configuration
   - !: uncommited changes present
   - 3: need to sync changes to three remotes (“+” means more than nine remotes)
** Remote status:
   - 2: two commits unsynced to this remote (“+” means more than nine commits)
   - N: never synced to this remote
EOF
}


function pConfig {
    echo "--hidden: $hidden"
    echo "--depth: $depth"
    echo "--relative-to: $relativeTo"
    echo "--verbose: $verbose"
    echo "--help: $help"
}


# Check whether there is an initialised git repository in the current working
# directory.
function gitInitialised {
    git status &> /dev/null
    exitCode=$?

    return $exitCode
}


# Print the time and date (in YYYY-MM-DD HH:MM:SS format) of the last git-annex
# synchronisation of the given remote.  If it was never synced at all (e.g. b/c
# git-annex is not initialised), "never" is printed.
function pLastAnnexSync {
    remote=$1

    currentBranch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    ref="$remote/synced/$currentBranch"

    last=$(stat -c %y .git/refs/remotes/$ref 2> /dev/null | sed -r "s/\..*$//")
    if [[ $last = "" ]]; then
        last="never"
    fi

    echo "$last"
}


# Print the number of commits that were not yet synced to the given remote.
function pUnsynced {
    remote=$1

    currentBranch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    ref="$remote/synced/$currentBranch"

    # lastSyncedCommit=$(git rev-parse $ref 2> /dev/null)
    git rev-list "HEAD...$ref" --ignore-submodules --count 2> /dev/null
}


# Print the absolute paths to all repositories controlled by myrepos from the
# $HOME directory.
function pMrControlled {
    mr --directory $HOME run true | sed -r "s/^mr run: (.*)$/\1/" | grep -v "^$" | grep -v "^finished (.* ok)$"
}


# Whether the given repository is registered in mr.
function isMrControlled {
    repoPath=$1

    pMrControlled | grep "^$(realpath $repoPath)$" &> /dev/null
}


# Print the current working directory's path relative to $relativeTo.
function pRelativePath {
    realpath --relative-to=$relativeTo $(pwd)
}


# Print the statuses of the remotes of the repository that controls the current
# directory.
function pRemoteStatus {
    remote=$1

    url=$(git remote get-url $remote)

    pSyncStatus=""

    num=$(pUnsynced $remote)
    if [[ $num -gt 0 ]]; then
        # Remember that this remote was unsynced here, too. Dirty dirty state >.<
        remotes[$remote]=$(($remotes[$remote] + 1))

        if [[ $num -gt 9 ]]; then
            pSyncStatus="${pSyncStatus}+"
        else
            pSyncStatus="$pSyncStatus$num"
        fi
    else
        pSyncStatus="$pSyncStatus "
    fi

    if [[ $(pLastAnnexSync $remote) == "never" ]]; then
        pSyncStatus="${pSyncStatus}N"
    else
        pSyncStatus="${pSyncStatus} "
    fi

    printf "    %3s %s\n" "$pSyncStatus" "$remote → $url"
}


# Print the status of the repository that controls the current directory.
function pRepositoryStatus {
    repoStatus=""

    if isMrControlled $(pwd); then
        repoStatus="${repoStatus}M"
    # elif shouldBeInMrconfig $remote; then
    #     repoStatus="${repoStatus}!"
    else
        repoStatus="${repoStatus} "
    fi

    if gitInitialised; then
        unsyncedRemotes=0

        for r in $(git remote); do
            if [[ ! $(pUnsynced $r) -eq 0 ]]; then
                unsyncedRemotes=$((unsyncedRemotes + 1))
            fi
        done

        # Whether there are uncommitted changes
        if git diff --quiet; then
            repoStatus="${repoStatus} "
        else
            repoStatus="${repoStatus}!"
        fi

        if [[ $unsyncedRemotes -gt 9 ]]; then
            repoStatus="${repoStatus}+"
        else
            repoStatus="${repoStatus}$unsyncedRemotes"
        fi

        printf "%3s %s\n" "$repoStatus" $(pRelativePath)

        if [[ -n verbose ]]; then
            for r in $(git remote); do
                pRemoteStatus $r
            done
        fi
    else
        printf "%3s %s\n" "$repoStatus" $(pRelativePath)
    fi
}


# Print the synchronisation status of the current directory.  If it is not under
# version control (currently only git is checked), recurse up to the given
# remaining depth to find repositories.
function pSyncStatusRecurse {
    remainingDepth=$1

    # If current directory already under version control
    if gitInitialised; then
        pRepositoryStatus
    else
        # Search for folders in current directory
        if [[ -n $hidden ]]; then
            dirs=( $(find . -maxdepth 1 -type d) )
        else
            dirs=( $(find . -maxdepth 1 -type d -and -not -name '.*') )
        fi

        for dir in $dirs; do
            pushd "$dir"

            pSyncStatusRecurse $(($remainingDepth - 1))

            popd
        done
    fi
}


# Print the synchronisation status of all the repositories controlled by myrepos
# from the $HOME directory.
function pSyncStatus {
    for repo in $(pMrControlled); do
        pushd "$repo"

        pRepositoryStatus

        popd
    done
}


[[ -n $verbose ]] && pConfig

[[ -n $help ]] && pUsage && exit 0

[[ -n $longHelp ]] && pLongUsage && exit 0

if [[ -n $depth ]]; then
    pSyncStatusRecurse $depth
else
    pSyncStatus
fi

echo "Remote-wise summary (“How many repositories have unsynced changes for these remotes?”):"
for k in "${(@k)remotes}"; do
    printf "  %s: %s\n" $k $remotes[$k]
done

# unused stuff
# changeDates=( $(find .git/refs/remotes -maxdepth 2 -iname git-annex -printf "%P %A@ " | sed -r "s/\/git-annex//g;s/\.[[:digit:]]*//g") )
# $(git rev-list "HEAD...$r/$currentBranch" --ignore-submodules --count &> /dev/null) -gt 0 ]]
