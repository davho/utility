#!/usr/bin/env bash
#
# Credit for the basic idea goes to pbrisbin
# (https://pbrisbin.com/posts/mutt_gmail_offlineimap/) and probably many others.

# Check every $interval seconds if the process identified as $1 is still
# running. After the next check after $wait seconds, kill it. Return non-zero to
# indicate something was killed.

wait=${1:-300}
shift
interval=10

monitor() {
    local pid=$1 i=0

    while ps $pid &>/dev/null; do
        if (( i++ > wait / interval )); then
            echo "Max checks reached. Sending SIGKILL to ${pid}..." >&2
            kill -9 $pid
            return 1
        fi

        sleep $interval
    done

    return 0
}

generate_mailbox_files() {
    local mailbox=$1
    sed -E 's/ "/\n"/g' .mutt/mailboxes.muttrc \
        | grep -E "^mailboxes|^\"\\+$mailbox" \
        | sed -E "s/\\+$mailbox\\//\\+/" \
        | xargs -d '\n' > "$HOME/.mutt/accounts/$mailbox-mailboxes.muttrc"
}

date

# First check whether offlineimap is already running; if it is, exit.
if [[ -n $(pgrep offlineimap) ]]; then
    echo "Process $pid already running. Exiting..." >&2
    exit 1
fi

offlineimap -o "$@" &
monitor $!
generate_mailbox_files uni
generate_mailbox_files privat
generate_mailbox_files beide
ret=$?

# MAYBE if needed
# sleep 1
# notmuch new
# afew --new --tag --verbose

exit $ret
